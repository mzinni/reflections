# Reflections from lesson 1 of Udacity's ud775 course - git and github

Q: How did viewing a diff between two versions of a file help you see the bug that was introduced?
A: The plus/minus signs helped indicate which lines changed, making spotting the mistake easier...

Q: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
A: Less risky to make silly changes, just to try them out, if I can move back in time to a "safe" version easily

Q: What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
A: code should always compile, and it helps logicall group small, revertable, changes...

Q: Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
A: Systems like Docs were designed for single-files - meaning that there's really no concept of a project containing more than one file. Others, like Git, are specificially designed for multi-file projects (like code, etc)

Q: How can you use the commands git log and git diff to view the history of files?
A: git log will show commits, and we can use diff to check changes between commits using hashes

Q: How might using version control make you more confident to make changes that could break something?
A: always having quick, easy access to working versions

Q: Now that you have your workspace set up, what do you want to try using Git for?
A: Want to use it to connect to github/GCP, and work on projects there...


